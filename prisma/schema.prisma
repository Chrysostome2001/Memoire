// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Classe {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nom       String
  eleves Eleve[]
  enseignant_classe Enseignant_Classe[]
  piecejointe PieceJointe[]
}

model Matiere {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  matiere   String
  note_inter Note_inter[]
  note_devoir Note_devoir[]
  rang Rang[]
  coeffient Coefficient @relation(fields: [id_coefficient],references: [id])
  enseignant_matiere Enseignant_Classe[]
  id_coefficient Int
  commentaire Commentaire[]
  piecejointe PieceJointe[]
}

model Rang {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rang Int
  id_matiere Int
  id_eleve Int
  id_trimestre Int
  matiere Matiere @relation(fields: [id_matiere], references: [id])
  eleve Eleve @relation(fields: [id_eleve], references: [id])
  trimestre Trimestre @relation(fields: [id_trimestre], references: [id])
  @@unique([id_eleve, id_matiere, id_trimestre])
}

model Coefficient {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  coefficient Int
  matiere Matiere[]
}


model Parent {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nom       String
  prenom    String
  contact   String
  photo     Bytes?
  username  String    @unique
  password  String
  role      String   @default("parent")
  enfants Eleve[]
}

model Enseignant {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nom          String
  prenom       String
  contact      String
  sexe         String
  photo        Bytes?
  username     String    @unique
  password     String
  role      String   @default("enseignant")
  enseignant_classe Enseignant_Classe[]
  note_inter Note_inter[]
  note_devoir Note_devoir[]
  commentaire Commentaire[]
  piecejointe PieceJointe[]
}

model Eleve {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nom String
  prenom String
  photo Bytes?
  sexe String
  classe Classe @relation(fields: [id_classe], references: [id])
  parent Parent @relation(fields: [id_parent], references: [id])
  id_classe Int
  id_parent Int
  username String @unique
  password String @unique
  role      String   @default("eleve")
  note_inter Note_inter[]
  note_devoir Note_devoir[]
  rang Rang[]
  commentaire Commentaire[]
}

model Commentaire {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contenu String
  id_eleve Int
  id_enseignant Int
  id_matiere Int
  id_trimestre Int
  vu Boolean @default(false)
  eleve Eleve @relation(fields: [id_eleve], references: [id])
  enseignant Enseignant @relation(fields: [id_enseignant], references: [id])
  matiere Matiere @relation(fields: [id_matiere], references: [id])
  trimestre Trimestre @relation(fields: [id_trimestre], references: [id])
}

model PieceJointe {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  titre String
  piece Bytes
  id_classe Int
  id_matiere Int
  id_enseignant Int
  classe Classe @relation(fields: [id_classe], references: [id])
  matiere Matiere @relation(fields: [id_matiere], references: [id])
  enseignant Enseignant @relation(fields: [id_enseignant], references: [id])
}
model Enseignant_Classe {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  id_enseignant Int
  id_classe Int
  id_matiere Int
  enseignant Enseignant @relation(fields: [id_enseignant], references: [id])
  classe Classe @relation(fields: [id_classe], references: [id])
  matiere Matiere @relation(fields: [id_matiere], references: [id])
}

model Trimestre {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nom String
  note_inter Note_inter[]
  note_devoir Note_devoir[]
  rang Rang[]
  commenstaire Commentaire[]
}
model Note_inter {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  inter Float
  id_eleve Int
  id_enseignant Int
  id_matiere Int
  id_trimestre Int
  vu Boolean @default(false)
  eleve Eleve @relation(fields: [id_eleve], references: [id])
  enseignant Enseignant @relation(fields: [id_enseignant], references: [id])
  matiere Matiere @relation(fields: [id_matiere], references: [id])
  trimestre Trimestre @relation(fields: [id_trimestre], references: [id])
  @@unique([id_eleve, id_enseignant, id_matiere, id_trimestre, inter])
}

model Note_devoir {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  devoir Float
  id_eleve Int
  id_enseignant Int
  id_matiere Int
  id_trimestre Int
  vu Boolean @default(false)
  eleve Eleve @relation(fields: [id_eleve], references: [id])
  enseignant Enseignant @relation(fields: [id_enseignant], references: [id])
  matiere Matiere @relation(fields: [id_matiere], references: [id])
  trimestre Trimestre @relation(fields: [id_trimestre], references: [id])
  @@unique([id_eleve, id_enseignant, id_matiere, id_trimestre, devoir])
}

model Admin {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nom          String
  prenom       String
  email        String
  photo        Bytes?     // Assumed reference to Matiere's ID
  username     String    @unique
  password     String
  role      String   @default("admin")
}

model Directeur {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nom          String
  prenom       String
  email        String
  photo        Bytes?     // Assumed reference to Matiere's ID
  username     String    @unique
  password     String
  role      String   @default("directeur")
}